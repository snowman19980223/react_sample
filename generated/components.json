{
  "schemaVersion": 1,
  "components": {
    "action_menu": {
      "id": "action_menu",
      "name": "ActionMenu",
      "status": "beta",
      "a11yReviewed": true,
      "stories": [],
      "props": [
        {
          "name": "children",
          "type": "React.ReactElement[]",
          "defaultValue": "",
          "required": true,
          "description": "Recommended: `ActionMenu.Button` or `ActionMenu.Anchor` with `ActionMenu.Overlay`"
        },
        {
          "name": "open",
          "type": "boolean",
          "defaultValue": "false",
          "description": "If defined, will control the open/closed state of the overlay. Must be used in conjuction with `onOpenChange`."
        },
        {
          "name": "onOpenChange",
          "type": "(open: boolean) => void",
          "defaultValue": "",
          "description": "If defined, will control the open/closed state of the overlay. Must be used in conjuction with `open`."
        },
        {
          "name": "anchorRef",
          "type": "React.RefObject<HTMLElement>",
          "defaultValue": "",
          "description": "Useful for defining an external anchor"
        }
      ],
      "subcomponents": [
        {
          "name": "ActionMenu.Button",
          "props": [
            {
              "name": "children",
              "type": "React.ReactElement",
              "defaultValue": "",
              "required": true,
              "description": ""
            }
          ],
          "passthrough": {
            "element": "Button",
            "url": "/react/Button"
          }
        },
        {
          "name": "ActionMenu.Anchor",
          "props": [
            {
              "name": "children",
              "type": "React.ReactElement",
              "defaultValue": "",
              "required": true,
              "description": "Accepts a single child element"
            }
          ]
        },
        {
          "name": "ActionMenu.Overlay",
          "props": [
            {
              "name": "children",
              "type": "React.ReactNode",
              "defaultValue": "",
              "required": true,
              "description": ""
            },
            {
              "name": "align",
              "type": "start | center | end",
              "defaultValue": "start",
              "description": ""
            }
          ],
          "passthrough": {
            "element": "Overlay",
            "url": "/react/Overlay"
          }
        }
      ]
    },
    "avatar": {
      "id": "avatar",
      "name": "Avatar",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [],
      "props": [
        {
          "name": "alt",
          "type": "string",
          "defaultValue": "''",
          "description": "Provide alt text when the avatar is used without a name next to it."
        },
        {
          "name": "size",
          "type": "number",
          "defaultValue": "20",
          "description": "The size of the avatar in pixels."
        },
        {
          "name": "square",
          "type": "boolean",
          "defaultValue": "false",
          "description": "If true, the avatar will be square instead of circular."
        },
        {
          "name": "sx",
          "type": "SystemStyleObject"
        }
      ],
      "subcomponents": []
    },
    "avatar_pair": {
      "id": "avatar_pair",
      "name": "AvatarPair",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [],
      "props": [
        {
          "name": "children",
          "type": "Avatar[]",
          "defaultValue": "",
          "description": ""
        },
        {
          "name": "sx",
          "type": "SystemStyleObject"
        }
      ],
      "subcomponents": []
    },
    "avatar_stack": {
      "id": "avatar_stack",
      "name": "AvatarStack",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [],
      "props": [
        {
          "name": "alignRight",
          "type": "boolean",
          "defaultValue": "false",
          "description": "Align the avatars to the right"
        },
        {
          "name": "sx",
          "type": "SystemStyleObject"
        }
      ],
      "subcomponents": []
    },
    "box": {
      "id": "box",
      "name": "Box",
      "status": "beta",
      "a11yReviewed": false,
      "stories": [],
      "props": [
        {
          "name": "ref",
          "type": "React.RefObject<HTMLDivElement>"
        },
        {
          "name": "as",
          "type": "React.ElementType",
          "defaultValue": "\"div\""
        },
        {
          "name": "sx",
          "type": "SystemStyleObject"
        }
      ],
      "subcomponents": []
    },
    "branch_name": {
      "id": "branch_name",
      "name": "BranchName",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [],
      "props": [
        {
          "name": "ref",
          "type": "React.RefObject<HTMLAnchorElement>"
        },
        {
          "name": "as",
          "type": "React.ElementType",
          "defaultValue": "\"a\""
        },
        {
          "name": "sx",
          "type": "SystemStyleObject"
        }
      ],
      "subcomponents": []
    },
    "breadcrumbs": {
      "id": "breadcrumbs",
      "name": "Breadcrumbs",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [],
      "props": [
        {
          "name": "children",
          "type": "Breadcrumbs.Item[]",
          "defaultValue": "",
          "description": ""
        },
        {
          "name": "sx",
          "type": "SystemStyleObject"
        }
      ],
      "subcomponents": [
        {
          "name": "Breadcrumbs.Item",
          "props": [
            {
              "name": "selected",
              "type": "boolean",
              "defaultValue": "false",
              "description": ""
            },
            {
              "name": "ref",
              "type": "React.RefObject<HTMLAnchorElement>"
            },
            {
              "name": "as",
              "type": "React.ElementType",
              "defaultValue": "\"a\""
            },
            {
              "name": "sx",
              "type": "SystemStyleObject"
            }
          ],
          "passthrough": {
            "element": "a",
            "url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#Attributes"
          }
        }
      ]
    },
    "button_group": {
      "id": "button_group",
      "name": "ButtonGroup",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [],
      "props": [
        {
          "name": "sx",
          "type": "SystemStyleObject"
        },
        {
          "name": "ref",
          "type": "React.RefObject<HTMLDivElement>"
        }
      ],
      "subcomponents": []
    },
    "checkbox": {
      "id": "checkbox",
      "name": "Checkbox",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [],
      "props": [
        {
          "name": "checked",
          "type": "boolean",
          "defaultValue": "",
          "description": "Modifies true/false value of the native checkbox"
        },
        {
          "name": "defaultChecked",
          "type": "boolean",
          "defaultValue": "",
          "description": "Checks the input by default in uncontrolled mode"
        },
        {
          "name": "disabled",
          "type": "boolean",
          "defaultValue": "",
          "description": "Modifies the native disabled state of the native checkbox"
        },
        {
          "name": "indeterminate",
          "type": "boolean",
          "defaultValue": "false",
          "description": "Applies an [ indeterminate state ](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox#attr-indeterminate) to the checkbox"
        },
        {
          "name": "onChange",
          "type": "(event: React.ChangeEvent) => void",
          "defaultValue": "",
          "description": "A callback function that is triggered when the checked state has been changed"
        },
        {
          "name": "validationStatus",
          "type": "'error' | 'success' | 'warning'",
          "defaultValue": "",
          "description": "Only used to inform ARIA attributes.<br /> Individual checkboxes do not have validation styles."
        },
        {
          "name": "value",
          "type": "string",
          "defaultValue": "",
          "description": "A unique value that is never shown to the user.<br /> Used during form submission and to identify which checkbox inputs are selected."
        },
        {
          "name": "ref",
          "type": "React.RefObject<HTMLInputElement>"
        },
        {
          "name": "as",
          "type": "React.ElementType",
          "defaultValue": "\"input\""
        },
        {
          "name": "sx",
          "type": "SystemStyleObject"
        }
      ],
      "subcomponents": []
    },
    "checkbox_group": {
      "id": "checkbox_group",
      "name": "CheckboxGroup",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [],
      "props": [
        {
          "name": "aria-labelledby",
          "type": "string",
          "defaultValue": "",
          "description": "Used when associating the input group with a label other than CheckboxGroup.Label"
        },
        {
          "name": "children",
          "type": "CheckboxGroup.Label | CheckboxGroup.Caption | CheckboxGroup.Validation | FormControl",
          "defaultValue": "",
          "required": true,
          "description": ""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "defaultValue": "false",
          "description": "Whether the input group allows user input"
        },
        {
          "name": "id",
          "type": "string",
          "defaultValue": "a generated string",
          "description": "<span> The unique identifier for this input group. Used to associate the label, validation text, and caption text. <br /> You may want a custom ID to make it easier to select elements in integration tests. </span>"
        },
        {
          "name": "onChange",
          "type": "(selected: string[], e?: ChangeEvent<HTMLInputElement>) => void",
          "defaultValue": "",
          "description": "An onChange handler that gets called when the selection changes"
        },
        {
          "name": "required",
          "type": "boolean",
          "defaultValue": "false",
          "description": "If true, the user must make a selection before the owning form can be submitted"
        },
        {
          "name": "sx",
          "type": "SystemStyleObject"
        }
      ],
      "subcomponents": [
        {
          "name": "CheckboxGroup.Label",
          "props": [
            {
              "name": "visuallyHidden",
              "type": "boolean",
              "defaultValue": "false",
              "description": "If true, the fieldset legend will be visually hidden"
            },
            {
              "name": "sx",
              "type": "SystemStyleObject"
            }
          ]
        },
        {
          "name": "CheckboxGroup.Description",
          "props": [
            {
              "name": "children",
              "type": "React.ReactNode",
              "defaultValue": "",
              "description": "The caption content"
            },
            {
              "name": "sx",
              "type": "SystemStyleObject"
            }
          ]
        },
        {
          "name": "CheckboxGroup.Validation",
          "props": [
            {
              "name": "children",
              "type": "React.ReactNode",
              "defaultValue": "",
              "description": "The validation message"
            },
            {
              "name": "variant",
              "type": "'error' | 'success' | 'warning'",
              "defaultValue": "",
              "required": true,
              "description": "Changes the visual style to match the validation status"
            },
            {
              "name": "sx",
              "type": "SystemStyleObject"
            }
          ]
        }
      ]
    },
    "circle_badge": {
      "id": "circle_badge",
      "name": "CircleBadge",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [],
      "props": [
        {
          "name": "variant",
          "type": "'small' | 'medium' | 'large'",
          "defaultValue": "'medium'",
          "description": "Creates a smaller or larger badge. Has no effect if the `size` prop is set"
        },
        {
          "name": "size",
          "type": "number",
          "defaultValue": "",
          "description": "Sets the size of the badge in pixels. Overrides the `variant` prop when set"
        },
        {
          "name": "inline",
          "type": "boolean",
          "defaultValue": "false",
          "description": "Styles the badge to `display: inline`"
        },
        {
          "name": "ref",
          "type": "React.RefObject<HTMLDivElement>"
        },
        {
          "name": "as",
          "type": "React.ElementType",
          "defaultValue": "\"div\""
        },
        {
          "name": "sx",
          "type": "SystemStyleObject"
        }
      ],
      "subcomponents": [
        {
          "name": "CircleBadge.Icon",
          "props": [
            {
              "name": "as",
              "type": "React.ElementType",
              "defaultValue": "StyledOcticon"
            }
          ],
          "passthrough": {
            "element": "StyledOcticon",
            "url": "/StyledOcticon"
          }
        }
      ]
    },
    "circle_octicon": {
      "id": "circle_octicon",
      "name": "CircleOcticon",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [],
      "props": [],
      "subcomponents": []
    },
    "counter_label": {
      "id": "counter_label",
      "name": "CounterLabel",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [],
      "props": [
        {
          "name": "scheme",
          "type": "'primary' | 'secondary'",
          "defaultValue": "",
          "description": "Pass in 'primary' for a darker background and inverse text, or 'secondary' for a lighter background and primary text. Omitting the scheme prop renders the default counter scheme"
        }
      ],
      "subcomponents": []
    },
    "details": {
      "id": "details",
      "name": "Details",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [],
      "props": [],
      "subcomponents": []
    },
    "drafts_dialog": {
      "id": "drafts_dialog",
      "name": "Dialog",
      "status": "draft",
      "a11yReviewed": false,
      "stories": [],
      "props": [],
      "subcomponents": []
    },
    "filter_list": {
      "id": "filter_list",
      "name": "FilterList",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [],
      "props": [],
      "subcomponents": []
    },
    "filtered_search": {
      "id": "filtered_search",
      "name": "FilteredSearch",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [],
      "props": [],
      "subcomponents": []
    },
    "flash": {
      "id": "flash",
      "name": "Flash",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [],
      "props": [
        {
          "name": "full",
          "type": "boolean",
          "defaultValue": "false",
          "description": "Creates a full width Flash component"
        },
        {
          "name": "variant",
          "type": "'default' | 'success' | 'warning' | 'danger'",
          "defaultValue": "'default'",
          "description": "Sets the background color and border"
        },
        {
          "name": "ref",
          "type": "React.RefObject<HTMLDivElement>"
        },
        {
          "name": "as",
          "type": "React.ElementType",
          "defaultValue": "\"div\""
        },
        {
          "name": "sx",
          "type": "SystemStyleObject"
        }
      ],
      "subcomponents": []
    },
    "header": {
      "id": "header",
      "name": "Header",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [],
      "props": [
        {
          "name": "sx",
          "type": "SystemStyleObject"
        }
      ],
      "subcomponents": [
        {
          "name": "Header.Item",
          "props": [
            {
              "name": "full",
              "type": "string",
              "defaultValue": "",
              "description": "Stretches item to fill the available space"
            },
            {
              "name": "sx",
              "type": "SystemStyleObject"
            }
          ]
        },
        {
          "name": "Header.Link",
          "props": [
            {
              "name": "href",
              "type": "string",
              "defaultValue": "",
              "description": "URL to be used for the Link"
            },
            {
              "name": "as",
              "type": "React.ElementType",
              "defaultValue": "\"a\""
            },
            {
              "name": "sx",
              "type": "SystemStyleObject"
            }
          ],
          "passthrough": {
            "element": "a",
            "url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attributes"
          }
        }
      ]
    },
    "heading": {
      "id": "heading",
      "name": "Heading",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [],
      "props": [],
      "subcomponents": [
        {
          "name": "",
          "props": [
            {
              "name": "sx",
              "type": "SystemStyleObject"
            },
            {
              "name": "as",
              "type": "React.ElementType",
              "defaultValue": "\"h2\""
            }
          ]
        }
      ]
    },
    "label": {
      "id": "label",
      "name": "Label",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [],
      "props": [
        {
          "name": "variant",
          "type": "| 'default' | 'primary' | 'secondary' | 'accent' | 'success' | 'attention' | 'severe' | 'danger' | 'done' | 'sponsors'",
          "defaultValue": "'default'",
          "description": "The color of the label"
        },
        {
          "name": "size",
          "type": "'small' | 'large'",
          "defaultValue": "'small'",
          "description": "How large the label is rendered"
        }
      ],
      "subcomponents": []
    },
    "label_group": {
      "id": "label_group",
      "name": "LabelGroup",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [],
      "props": [],
      "subcomponents": [
        {
          "name": "",
          "props": [
            {
              "name": "sx",
              "type": "SystemStyleObject"
            }
          ]
        }
      ]
    },
    "link": {
      "id": "link",
      "name": "Link",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [],
      "props": [
        {
          "name": "href",
          "type": "string",
          "defaultValue": "",
          "description": "URL to be used for the Link. (The `href` is passed to the underlying `<a>` element. If `as` is specified, the link behavior may need different props)."
        },
        {
          "name": "muted",
          "type": "boolean",
          "defaultValue": "false",
          "description": "Uses a less prominent shade for Link color, and the default link shade on hover"
        },
        {
          "name": "underline",
          "type": "boolean",
          "defaultValue": "false",
          "description": "Adds underline to the Link"
        },
        {
          "name": "hoverColor",
          "type": "string",
          "defaultValue": "",
          "description": "Color used when hovering over link"
        },
        {
          "name": "ref",
          "type": "React.RefObject<HTMLAnchorElement>"
        },
        {
          "name": "as",
          "type": "React.ElementType",
          "defaultValue": "\"a\""
        },
        {
          "name": "sx",
          "type": "SystemStyleObject"
        }
      ],
      "subcomponents": []
    },
    "overlay": {
      "id": "overlay",
      "name": "Overlay",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [],
      "props": [
        {
          "name": "returnFocusRef",
          "type": "React.RefObject<HTMLElement>",
          "defaultValue": "",
          "required": true,
          "description": "Ref for the element to focus when the `Overlay` is closed."
        },
        {
          "name": "onClickOutside",
          "type": "function",
          "defaultValue": "",
          "required": true,
          "description": "Function to call when clicking outside of the `Overlay`. Typically this function sets the `Overlay` visibility state to `false`."
        },
        {
          "name": "onEscape",
          "type": "function",
          "defaultValue": "",
          "required": true,
          "description": "Function to call when user presses `Escape`. Typically this function sets the `Overlay` visibility state to `false`."
        },
        {
          "name": "ignoreClickRefs",
          "type": "React.RefObject<HTMLElement> []",
          "defaultValue": "",
          "description": "An array of ref objects to ignore clicks on in the onOutsideClick behavior. This is often used to ignore clicking on the element that toggles the open/closed state for the Overlay to prevent the Overlay from being toggled twice."
        },
        {
          "name": "initialFocusRef",
          "type": "React.RefObject<HTMLElement>",
          "defaultValue": "",
          "description": "Ref for the element to focus when the `Overlay` is opened. If nothing is provided, the first focusable element in the `Overlay` body is focused."
        },
        {
          "name": "width",
          "type": "| 'small' | 'medium' | 'large' | 'xlarge' | 'xxlarge' | 'auto'",
          "defaultValue": "'auto'",
          "description": "Sets the width of the `Overlay`, pick from our set list of widths, or pass `auto` to automatically set the width based on the content of the `Overlay`. `small` corresponds to `256px`, `medium` corresponds to `320px`, `large` corresponds to `480px`, `xlarge` corresponds to `640px`, `xxlarge` corresponds to `960px`."
        },
        {
          "name": "height",
          "type": "| 'xsmall' | 'small' | 'medium' | 'large' | 'xlarge' | 'auto'",
          "defaultValue": "'auto'",
          "description": "Sets the height of the `Overlay`, pick from our set list of heights, or pass `auto` to automatically set the height based on the content of the `Overlay`. `xsmall` corresponds to `192px`, `small` corresponds to `256px`, `medium` corresponds to `320px`, `large` corresponds to `432px`, `xlarge` corresponds to `600px`."
        },
        {
          "name": "maxHeight",
          "type": "| 'xsmall' | 'small' | 'medium' | 'large' | 'xlarge'",
          "defaultValue": "",
          "description": "Sets the maximum height of the `Overlay`, pick from our set list of heights. `xsmall` corresponds to `192px`, `small` corresponds to `256px`, `medium` corresponds to `320px`, `large` corresponds to `432px`, `xlarge` corresponds to `600px`."
        },
        {
          "name": "visibility",
          "type": "| 'visible' | 'hidden'",
          "defaultValue": "'visible'",
          "description": "Sets the visibility of the `Overlay`."
        },
        {
          "name": "anchorSide",
          "type": "| 'inside-top' | 'inside-bottom' | 'inside-left' | 'inside-right' | 'inside-center' | 'outside-top' | 'outside-bottom' | 'outside-left' | 'outside-right'",
          "defaultValue": "",
          "description": "If provided, the Overlay will slide into position from the side of the anchor with a brief animation"
        },
        {
          "name": "top",
          "type": "number",
          "defaultValue": "0",
          "description": "Vertical position of the overlay, relative to its closest positioned ancestor (often its `Portal`)."
        },
        {
          "name": "left",
          "type": "number",
          "defaultValue": "0",
          "description": "Horizontal position of the overlay, relative to its closest positioned ancestor (often its `Portal`)."
        },
        {
          "name": "portalContainerName",
          "type": "string",
          "defaultValue": "",
          "description": "If defined, Overlays will be rendered in the named portal. See also `Portal`."
        },
        {
          "name": "sx",
          "type": "SystemStyleObject"
        }
      ],
      "subcomponents": []
    },
    "pagehead": {
      "id": "pagehead",
      "name": "Pagehead",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [],
      "props": [
        {
          "name": "as",
          "type": "string",
          "defaultValue": "div",
          "description": "Sets the underlying HTML tag for the component"
        },
        {
          "name": "sx",
          "type": "SystemStyleObject"
        }
      ],
      "subcomponents": []
    },
    "pointer_box": {
      "id": "pointer_box",
      "name": "PointerBox",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [],
      "props": [
        {
          "name": "caret",
          "type": "| 'top' | 'top-left' | 'top-right' | 'right' | 'right-top' | 'right-bottom' | 'bottom' | 'bottom-left' | 'bottom-right' | 'left' | 'left-top' | 'left-bottom'",
          "defaultValue": "'bottom'",
          "description": "Sets the location of the caret. The format is [edge]-[position on edge]. For example, right-top will position the caret on the top of the right edge of the box. Use top"
        }
      ],
      "subcomponents": []
    },
    "popover": {
      "id": "popover",
      "name": "Popover",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [],
      "props": [
        {
          "name": "as",
          "type": "string",
          "defaultValue": "div",
          "description": "Sets the underlying HTML tag for the component"
        },
        {
          "name": "caret",
          "type": "| 'top' | 'bottom' | 'left' | 'right' | 'bottom-left' | 'bottom-right' | 'top-left' | 'top-right' | 'left-bottom' | 'left-top' | 'right-bottom' | 'right-top' ",
          "defaultValue": "'top'",
          "description": "Controls the position of the caret"
        },
        {
          "name": "open",
          "type": "boolean",
          "defaultValue": "false",
          "description": "Controls the visibility of the popover."
        },
        {
          "name": "relative",
          "type": "boolean",
          "defaultValue": "false",
          "description": "Set to true to render the popover using relative positioning. "
        },
        {
          "name": "sx",
          "type": "SystemStyleObject"
        }
      ],
      "subcomponents": [
        {
          "name": "Popover.Content",
          "props": [
            {
              "name": "as",
              "type": "string",
              "defaultValue": "div",
              "description": "Sets the underlying HTML tag for the component"
            },
            {
              "name": "sx",
              "type": "SystemStyleObject"
            }
          ]
        }
      ]
    },
    "progress_bar": {
      "id": "progress_bar",
      "name": "ProgressBar",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [],
      "props": [
        {
          "name": "progress",
          "type": "number",
          "defaultValue": "0",
          "description": "Used to set the size of the green bar"
        },
        {
          "name": "barSize",
          "type": "| 'small' | 'large' | 'default'",
          "defaultValue": "'default'",
          "description": "Controls the height of the progress bar. If omitted, height is set to the default height."
        },
        {
          "name": "inline",
          "type": "boolean",
          "defaultValue": "false",
          "description": "Styles the progress bar inline"
        },
        {
          "name": "bg",
          "type": "string",
          "defaultValue": "'bg.successInverse'",
          "description": "Set the progress bar color"
        },
        {
          "name": "sx",
          "type": "SystemStyleObject"
        }
      ],
      "subcomponents": []
    },
    "radio": {
      "id": "radio",
      "name": "Radio",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [],
      "props": [
        {
          "name": "value",
          "type": "string",
          "defaultValue": "",
          "required": true,
          "description": "A unique value that is never shown to the user"
        },
        {
          "name": "name",
          "type": "string",
          "defaultValue": "",
          "description": "Required for grouping multiple radios"
        },
        {
          "name": "checked",
          "type": "boolean",
          "defaultValue": "",
          "description": "Modifies true/false value of the native radio"
        },
        {
          "name": "defaultChecked",
          "type": "boolean",
          "defaultValue": "",
          "description": "Selects the radio by default in uncontrolled mode"
        },
        {
          "name": "onChange",
          "type": "(event: React.ChangeEvent) => void",
          "defaultValue": "",
          "description": "A callback function that is triggered when the input state has been changed"
        },
        {
          "name": "disabled",
          "type": "boolean",
          "defaultValue": "",
          "description": "Modifies the native disabled state of the native checkbox"
        },
        {
          "name": "ref",
          "type": "React.RefObject<HTMLInputElement>"
        },
        {
          "name": "as",
          "type": "React.ElementType",
          "defaultValue": "\"input\""
        },
        {
          "name": "sx",
          "type": "SystemStyleObject"
        }
      ],
      "subcomponents": []
    },
    "radio_group": {
      "id": "radio_group",
      "name": "RadioGroup",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [],
      "props": [
        {
          "name": "aria-labelledby",
          "type": "string",
          "defaultValue": "",
          "description": "Used when associating the input group with a label other than RadioGroup.Label"
        },
        {
          "name": "children",
          "type": "RadioGroup.Label | RadioGroup.Caption | RadioGroup.Validation | FormControl",
          "defaultValue": "",
          "required": true,
          "description": ""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "defaultValue": "false",
          "description": "Whether the input group allows user input"
        },
        {
          "name": "id",
          "type": "string",
          "defaultValue": "A generated string",
          "description": "<span> The unique identifier for this input group. Used to associate the label, validation text, and caption text. <br /> You may want a custom ID to make it easier to select elements in integration tests. </span>"
        },
        {
          "name": "name",
          "type": "string",
          "defaultValue": "",
          "required": true,
          "description": "The name used to identify this group of radios"
        },
        {
          "name": "onChange",
          "type": "(selected: string | null, e?: ChangeEvent<HTMLInputElement>) => void",
          "defaultValue": "",
          "description": "An onChange handler that gets called when the selection changes"
        },
        {
          "name": "required",
          "type": "boolean",
          "defaultValue": "false",
          "description": "If true, the user must make a selection before the owning form can be submitted"
        },
        {
          "name": "sx",
          "type": "SystemStyleObject"
        }
      ],
      "subcomponents": [
        {
          "name": "RadioGroup.Label",
          "props": [
            {
              "name": "visuallyHidden",
              "type": "boolean",
              "defaultValue": "false",
              "description": "If true, the fieldset legend will be visually hidden"
            },
            {
              "name": "sx",
              "type": "SystemStyleObject"
            }
          ]
        },
        {
          "name": "RadioGroup.Description",
          "props": [
            {
              "name": "children",
              "type": "React.ReactNode",
              "defaultValue": "",
              "description": "The caption content"
            },
            {
              "name": "sx",
              "type": "SystemStyleObject"
            }
          ]
        },
        {
          "name": "RadioGroup.Validation",
          "props": [
            {
              "name": "children",
              "type": "React.ReactNode",
              "defaultValue": "",
              "description": "The validation message"
            },
            {
              "name": "variant",
              "type": "'error' | 'success' | 'warning'",
              "defaultValue": "",
              "required": true,
              "description": "Changes the visual style to match the validation status"
            },
            {
              "name": "sx",
              "type": "SystemStyleObject"
            }
          ]
        }
      ]
    },
    "select": {
      "id": "select",
      "name": "Select",
      "status": "alpha",
      "a11yReviewed": true,
      "stories": [],
      "props": [
        {
          "name": "block",
          "type": "boolean",
          "defaultValue": "false",
          "description": "Creates a full width input element"
        },
        {
          "name": "contrast",
          "type": "boolean",
          "defaultValue": "false",
          "description": "Changes background color to a higher contrast color"
        },
        {
          "name": "placeholder",
          "type": "string",
          "defaultValue": "",
          "description": "Placeholder text to show when no option is selected. <br /> This option is hidden from the dropdown menu when the 'required' prop is set"
        },
        {
          "name": "size",
          "type": "'small' | 'medium' | 'large'",
          "defaultValue": "",
          "description": "Creates a smaller or larger input than the default."
        },
        {
          "name": "validationStatus",
          "type": "'error' | 'success' | 'warning'",
          "defaultValue": "",
          "description": "Style the input to match the status"
        }
      ],
      "subcomponents": []
    },
    "spinner": {
      "id": "spinner",
      "name": "Spinner",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [],
      "props": [],
      "subcomponents": []
    },
    "state_label": {
      "id": "state_label",
      "name": "StateLabel",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [],
      "props": [],
      "subcomponents": []
    },
    "styled_octicon": {
      "id": "styled_octicon",
      "name": "StyledOcticon",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [],
      "props": [
        {
          "name": "ariaLabel",
          "type": "string",
          "defaultValue": "",
          "description": "Specifies the aria-label attribute, which is read verbatim by screen readers "
        },
        {
          "name": "icon",
          "type": "Component",
          "defaultValue": "",
          "description": "Checks the input by default in uncontrolled modeName of the [Octicon component](https://primer.style/octicons/) used in the"
        },
        {
          "name": "color",
          "type": "string",
          "defaultValue": "",
          "description": "Sets an override color for the Octicon. Compatible with colors from the [Primer color system](https://primer.style/primitives/colors).\""
        },
        {
          "name": "size",
          "type": "number",
          "defaultValue": "16",
          "description": "Sets the uniform `width` and `height` of the SVG element"
        },
        {
          "name": "verticalAlign",
          "type": "string",
          "defaultValue": "text-bottom",
          "description": "Sets the `vertical-align` CSS property"
        },
        {
          "name": "sx",
          "type": "SystemStyleObject"
        }
      ],
      "subcomponents": []
    },
    "sub_nav": {
      "id": "sub_nav",
      "name": "SubNav",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [],
      "props": [],
      "subcomponents": []
    },
    "tab_nav": {
      "id": "tab_nav",
      "name": "TabNav",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [],
      "props": [],
      "subcomponents": []
    },
    "text": {
      "id": "text",
      "name": "Text",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [],
      "props": [],
      "subcomponents": []
    },
    "text_input": {
      "id": "text_input",
      "name": "TextInput",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [],
      "props": [
        {
          "name": "aria-label",
          "type": "string",
          "defaultValue": "",
          "description": "Allows input to be accessible."
        },
        {
          "name": "block",
          "type": "boolean",
          "defaultValue": "false",
          "description": "Creates a full-width input element"
        },
        {
          "name": "contrast",
          "type": "boolean",
          "defaultValue": "false",
          "description": "Changes background color to a higher contrast color"
        },
        {
          "name": "size",
          "type": "'small' | 'medium' | 'large'",
          "defaultValue": "",
          "description": "Creates a smaller or larger input than the default."
        },
        {
          "name": "loading",
          "type": "boolean",
          "defaultValue": "",
          "description": "Whether to show a loading indicator in the input"
        },
        {
          "name": "loaderPosition",
          "type": "'auto' | 'leading' | 'trailing'",
          "defaultValue": "",
          "description": "<div>Which position to render the loading indicator</div> <ul> <li> 'auto' (default): at the end of the input, unless a `leadingVisual` is passed. Then, it will render at the beginning </li> <li>'leading': at the beginning of the input</li> <li>'trailing': at the end of the input</li> </ul>"
        },
        {
          "name": "leadingVisual",
          "type": "string | React.ComponentType",
          "defaultValue": "",
          "description": "Visual positioned on the left edge inside the input"
        },
        {
          "name": "monospace",
          "type": "boolean",
          "defaultValue": "false",
          "description": "Shows input in monospace font"
        },
        {
          "name": "trailingVisual",
          "type": "string | React.ComponentType",
          "defaultValue": "",
          "description": "Visual positioned on the right edge inside the input"
        },
        {
          "name": "trailingAction",
          "type": "React.ReactElement<HTMLProps<HTMLButtonElement>>",
          "defaultValue": "",
          "description": "A visual that renders inside the input after the typing area"
        },
        {
          "name": "validationStatus",
          "type": "'error' | 'success' | 'warning'",
          "defaultValue": "",
          "description": "Style the input to match the status"
        },
        {
          "name": "variant",
          "type": "'small' | 'medium' | 'large'",
          "defaultValue": "",
          "deprecated": true,
          "description": "(Use size) Creates a smaller or larger input than the default."
        },
        {
          "name": "width",
          "type": "string | number | Array<string | number>",
          "defaultValue": "",
          "deprecated": true,
          "description": "(Use sx prop) Set the width of the input"
        },
        {
          "name": "maxWidth",
          "type": "string | number | Array<string | number>",
          "defaultValue": "",
          "deprecated": true,
          "description": "(Use sx prop) Set the maximum width of the input"
        },
        {
          "name": "minWidth",
          "type": "string | number | Array<string | number>",
          "defaultValue": "",
          "deprecated": true,
          "description": "(Use sx prop) Set the minimum width of the input"
        },
        {
          "name": "icon",
          "type": "React.ComponentType",
          "defaultValue": "",
          "deprecated": true,
          "description": "(Use leadingVisual or trailingVisual) An Octicon React component. To be used inside of input. Positioned on the left edge."
        },
        {
          "name": "sx",
          "type": "SystemStyleObject"
        },
        {
          "name": "ref",
          "type": "React.RefObject<HTMLInputElement>"
        }
      ],
      "subcomponents": [
        {
          "name": "TextInput.Action",
          "props": [
            {
              "name": "aria-label",
              "type": "string",
              "defaultValue": "",
              "description": "Text that appears in a tooltip. If an icon is passed, this is also used as the label used by assistive technologies."
            },
            {
              "name": "icon",
              "type": "React.FunctionComponent",
              "defaultValue": "",
              "description": "The icon to render inside the button"
            },
            {
              "name": "variant",
              "type": "'default' | 'primary' | 'invisible' | 'danger'",
              "defaultValue": "",
              "deprecated": true,
              "description": "(Deprecated so that only the 'invisible' variant is used) Determine's the styles on a button"
            },
            {
              "name": "ref",
              "type": "React.RefObject<HTMLButtonElement>"
            },
            {
              "name": "as",
              "type": "React.ElementType",
              "defaultValue": "\"button\""
            },
            {
              "name": "sx",
              "type": "SystemStyleObject"
            }
          ],
          "passthrough": {
            "element": "button",
            "url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attributes"
          }
        }
      ]
    },
    "text_input_with_tokens": {
      "id": "text_input_with_tokens",
      "name": "TextInputWithTokens",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [],
      "props": [
        {
          "name": "tokens",
          "type": "TokenProps[]",
          "defaultValue": "",
          "required": true,
          "description": "The array of tokens to render"
        },
        {
          "name": "onTokenRemove",
          "type": "(tokenId: string|number) => void",
          "defaultValue": "",
          "required": true,
          "description": "The function that gets called when a token is removed"
        },
        {
          "name": "tokenComponent",
          "type": "React.ComponentType<any>",
          "defaultValue": "Token",
          "description": "The component used to render each token"
        },
        {
          "name": "maxHeight",
          "type": "React.CSSProperties['maxHeight']",
          "defaultValue": "",
          "description": "The maximum height of the component. If the content in the input exceeds this height, it will scroll vertically"
        },
        {
          "name": "preventTokenWrapping",
          "type": "boolean",
          "defaultValue": "false",
          "description": "Whether tokens should render inline horizontally. By default, tokens wrap to new lines"
        },
        {
          "name": "size",
          "type": "'small' | 'medium' | 'large' | 'xlarge'",
          "defaultValue": "xlarge",
          "description": "The size of the tokens and text input"
        },
        {
          "name": "hideTokenRemoveButtons",
          "type": "boolean",
          "defaultValue": "false",
          "description": "Whether the remove buttons should be rendered in the tokens"
        },
        {
          "name": "validationStatus",
          "type": "'error' | 'success' | 'warning'",
          "defaultValue": "",
          "description": "Style the input to match the status"
        },
        {
          "name": "visibleTokenCount",
          "type": "number",
          "defaultValue": "",
          "description": "The number of tokens to display before truncating"
        }
      ],
      "subcomponents": []
    },
    "textarea": {
      "id": "textarea",
      "name": "Textarea",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [],
      "props": [
        {
          "name": "required",
          "type": "boolean",
          "defaultValue": "",
          "description": "Indicates to the user and assistive technologies that the field value is required"
        },
        {
          "name": "cols",
          "type": "number",
          "defaultValue": "",
          "description": "Specifies the visible width of a text area."
        },
        {
          "name": "rows",
          "type": "number",
          "defaultValue": "",
          "description": "Specifies the visible height of a text area."
        },
        {
          "name": "block",
          "type": "boolean",
          "defaultValue": "false",
          "description": "Expands with width of the component to fill the parent elements"
        },
        {
          "name": "resize",
          "type": "'both' | 'horizontal' | 'vertical' | 'none'",
          "defaultValue": "'both'",
          "description": "Changes background color to a higher contrast color"
        },
        {
          "name": "validationStatus",
          "type": "'success' | 'error' | undefined",
          "defaultValue": "",
          "description": "Style the textarea to match the current form validation status"
        },
        {
          "name": "ref",
          "type": "React.RefObject<HTMLTextAreaElement>"
        },
        {
          "name": "ref",
          "type": "React.RefObject<HTMLTextareaElement>"
        },
        {
          "name": "as",
          "type": "React.ElementType",
          "defaultValue": "\"input\""
        },
        {
          "name": "sx",
          "type": "SystemStyleObject"
        }
      ],
      "subcomponents": []
    },
    "timeline": {
      "id": "timeline",
      "name": "Timeline",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [],
      "props": [],
      "subcomponents": []
    },
    "toggle_switch": {
      "id": "toggle_switch",
      "name": "ToggleSwitch",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [],
      "props": [
        {
          "name": "aria-describedby",
          "type": "string",
          "defaultValue": "",
          "description": "The id of the DOM node that describes the switch"
        },
        {
          "name": "aria-labelledby",
          "type": "string",
          "defaultValue": "",
          "required": true,
          "description": "The id of the DOM node that labels the switch"
        },
        {
          "name": "defaultChecked",
          "type": "boolean",
          "defaultValue": "",
          "description": "Uncontrolled - whether the switch is turned on"
        },
        {
          "name": "disabled",
          "type": "boolean",
          "defaultValue": "",
          "description": "Whether the switch is ready for user input"
        },
        {
          "name": "loading",
          "type": "boolean",
          "defaultValue": "",
          "description": "Whether the switch's value is being calculated"
        },
        {
          "name": "checked",
          "type": "boolean",
          "defaultValue": "",
          "description": "Whether the switch is turned on"
        },
        {
          "name": "onChange",
          "type": "(on: boolean) => void",
          "defaultValue": "",
          "description": "The callback that is called when the switch is toggled on or off"
        },
        {
          "name": "onClick",
          "type": "(e: MouseEvent) => void",
          "defaultValue": "",
          "description": "The callback that is called when the switch is clicked"
        },
        {
          "name": "size",
          "type": "'small' | 'medium'",
          "defaultValue": "'medium'",
          "description": "Size of the switch"
        },
        {
          "name": "statusLabelPosition",
          "type": "'start' | 'end'",
          "defaultValue": "'start'",
          "description": "<div>Whether the \"on\" and \"off\" labels should appear before or after the switch.</div> <div> <Text fontWeight=\"bold\">This should only be changed when the switch's alignment needs to be adjusted.</Text> For example: It needs to be left-aligned because the label appears above it and the caption appears below it. </div>"
        }
      ],
      "subcomponents": []
    },
    "tooltip": {
      "id": "tooltip",
      "name": "Tooltip",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [],
      "props": [],
      "subcomponents": []
    },
    "truncate": {
      "id": "truncate",
      "name": "Truncate",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [],
      "props": [],
      "subcomponents": []
    },
    "underline_nav": {
      "id": "underline_nav",
      "name": "UnderlineNav",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [],
      "props": [],
      "subcomponents": []
    },
    "action_list": {
      "id": "action_list",
      "name": "ActionList",
      "status": "beta",
      "a11yReviewed": false,
      "stories": [],
      "props": [
        {
          "name": "children",
          "type": "ActionList.Item[] | ActionList.LinkItem[] | ActionList.Group[]",
          "defaultValue": "",
          "required": true,
          "description": ""
        },
        {
          "name": "variant",
          "type": "'inset' | 'full'",
          "defaultValue": "'inset'",
          "description": "`inset` children are offset (vertically and horizontally) from list edges. `full` children are flush (vertically and horizontally) with list edges"
        },
        {
          "name": "selectionVariant",
          "type": "'single' | 'multiple'",
          "defaultValue": "",
          "description": "Whether multiple items or a single item can be selected."
        },
        {
          "name": "showDivider",
          "type": "boolean",
          "defaultValue": "false",
          "description": "Display a divider above each item in this list when it does not follow a header or divider."
        },
        {
          "name": "role",
          "type": "AriaRole",
          "defaultValue": "",
          "description": "ARIA role describing the function of the list. `listbox` and `menu` are a common values."
        },
        {
          "name": "sx",
          "type": "SystemStyleObject"
        }
      ],
      "subcomponents": [
        {
          "name": "ActionList.Item",
          "props": [
            {
              "name": "children",
              "type": "React.ReactNode | ActionList.LeadingVisual | ActionList.Description | ActionList.TrailingVisual",
              "defaultValue": "",
              "required": true,
              "description": ""
            },
            {
              "name": "variant",
              "type": "'default' | 'danger'",
              "defaultValue": "'default'",
              "description": "`danger` indicates that the item is destructive."
            },
            {
              "name": "onSelect",
              "type": "(event: React.MouseEvent<HTMLLIElement> | React.KeyboardEvent<HTMLLIElement>) => void",
              "defaultValue": "",
              "description": "Callback that is called when the item is selected using either the mouse or keyboard."
            },
            {
              "name": "selected",
              "type": "boolean",
              "defaultValue": "false",
              "description": "Indicate whether the item is selected. Only applies to items that can be selected."
            },
            {
              "name": "active",
              "type": "boolean",
              "defaultValue": "false",
              "description": "Indicate whether the item is active. There should never be more than one active item."
            },
            {
              "name": "disabled",
              "type": "boolean",
              "defaultValue": "false",
              "description": "Items that are disabled can not be clicked, selected, or navigated to."
            },
            {
              "name": "role",
              "type": "AriaRole",
              "defaultValue": "",
              "description": "ARIA role describing the function of the item. `option` is a common value."
            },
            {
              "name": "sx",
              "type": "SystemStyleObject"
            }
          ]
        },
        {
          "name": "ActionList.LinkItem",
          "props": [
            {
              "name": "children",
              "type": "React.ReactNode | ActionList.LeadingVisual | ActionList.Description | ActionList.TrailingVisual",
              "defaultValue": "",
              "required": true,
              "description": ""
            },
            {
              "name": "active",
              "type": "boolean",
              "defaultValue": "false",
              "description": "Indicate whether the item is active. There should never be more than one active item."
            },
            {
              "name": "ref",
              "type": "React.RefObject<HTMLAnchorElement>"
            },
            {
              "name": "as",
              "type": "React.ElementType",
              "defaultValue": "\"a\""
            },
            {
              "name": "sx",
              "type": "SystemStyleObject"
            }
          ],
          "passthrough": {
            "element": "a",
            "url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#Attributes"
          }
        },
        {
          "name": "ActionList.LeadingVisual",
          "props": [
            {
              "name": "children",
              "type": "React.ReactNode",
              "defaultValue": "",
              "required": true,
              "description": "Icon (or similar) positioned before item text."
            },
            {
              "name": "sx",
              "type": "SystemStyleObject"
            }
          ]
        },
        {
          "name": "ActionList.TrailingVisual",
          "props": [
            {
              "name": "children",
              "type": "React.ReactNode",
              "defaultValue": "",
              "required": true,
              "description": "Visual positioned after item text."
            },
            {
              "name": "sx",
              "type": "SystemStyleObject"
            }
          ]
        },
        {
          "name": "ActionList.Description",
          "props": [
            {
              "name": "children",
              "type": "React.ReactNode",
              "defaultValue": "",
              "required": true,
              "description": ""
            },
            {
              "name": "variant",
              "type": "'inline' | 'block'",
              "defaultValue": "'inline'",
              "description": "`inline` descriptions are positioned beside primary text. `block` descriptions are positioned below primary text."
            },
            {
              "name": "sx",
              "type": "SystemStyleObject"
            }
          ]
        },
        {
          "name": "ActionList.Group",
          "props": [
            {
              "name": "children",
              "type": "ActionList.Item[] | ActionList.LinkItem[]",
              "defaultValue": "",
              "required": true,
              "description": ""
            },
            {
              "name": "title",
              "type": "string",
              "defaultValue": "",
              "description": "Title of the group."
            },
            {
              "name": "auxiliaryText",
              "type": "string",
              "defaultValue": "",
              "description": "Secondary text that provides additional information about the group."
            },
            {
              "name": "variant",
              "type": "'filled' | 'subtle'",
              "defaultValue": "'subtle'",
              "description": "`inline` descriptions are positioned beside primary text. `block` descriptions are positioned below primary text."
            },
            {
              "name": "selectionVariant",
              "type": "'single' | 'multiple' | false",
              "defaultValue": "",
              "description": "Set `selectionVariant` at the group level."
            },
            {
              "name": "role",
              "type": "AriaRole",
              "defaultValue": "",
              "description": "ARIA role describing the function of the list inside the group. `listbox` and `menu` are a common values."
            },
            {
              "name": "sx",
              "type": "SystemStyleObject"
            }
          ]
        }
      ]
    },
    "anchored_overlay": {
      "id": "anchored_overlay",
      "name": "AnchoredOverlay",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [],
      "props": [],
      "subcomponents": [
        {
          "name": "",
          "props": [
            {
              "name": "open",
              "type": "boolean",
              "defaultValue": "false",
              "description": "Determines whether the overlay portion of the component should be shown or not."
            },
            {
              "name": "onOpen",
              "type": "(gesture: 'anchor-click' | 'anchor-key-press') => unknown",
              "defaultValue": "",
              "description": "A callback that is called whenever the overlay is currently closed and an \"open gesture\" is detected."
            },
            {
              "name": "onClose",
              "type": "(gesture: 'anchor-click' | 'click-outside' | 'escape') => unknown",
              "defaultValue": "",
              "description": "A callback that is called whenever the overlay is currently open and a \"close gesture\" is detected."
            },
            {
              "name": "renderAnchor",
              "type": "<T extends React.HTMLAttributes<HTMLElement>>(props: T) => JSX.Element",
              "defaultValue": "",
              "description": "A custom function component used to render the anchor element. When renderAnchor is null, an anchorRef is required."
            },
            {
              "name": "anchorRef",
              "type": "React.RefObject<HTMLElement>",
              "defaultValue": "",
              "description": "An override to the internal `renderAnchor` ref that will be used to position the overlay. When `renderAnchor` is `null`, this can be used to make an anchor that is detached from ` AnchoredOverlay `."
            },
            {
              "name": "anchorId",
              "type": "string",
              "defaultValue": "",
              "description": "An override to the internal id that will be passed to the anchor."
            },
            {
              "name": "side",
              "type": "| 'inside-top' | 'inside-bottom' | 'inside-left' | 'inside-right' | 'inside-center' | 'outside-top' | 'outside-bottom' | 'outside-left' | 'outside-right'",
              "defaultValue": "'outside-bottom'",
              "description": ""
            },
            {
              "name": "align",
              "type": "'start' | 'center' | 'end'",
              "defaultValue": "'start'",
              "description": ""
            },
            {
              "name": "overlayProps",
              "type": "Partial<OverlayProps>",
              "defaultValue": "",
              "description": "Props to be spread on the internal `Overlay` component."
            },
            {
              "name": "focusTrapSettings",
              "type": "Partial<FocusTrapHookSettings>",
              "defaultValue": "",
              "description": "Settings to apply to the focus trap on the internal `Overlay` component."
            },
            {
              "name": "focusZoneSettings",
              "type": "Partial<FocusZoneHookSettings>",
              "defaultValue": "",
              "description": "Settings to apply to the focus zone on the internal `Overlay` component."
            }
          ]
        }
      ]
    },
    "autocomplete": {
      "id": "autocomplete",
      "name": "Autocomplete",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [],
      "props": [],
      "subcomponents": [
        {
          "name": "Autocomplete.Input",
          "props": [
            {
              "name": "as",
              "type": "React.ElementType",
              "defaultValue": "TextInput"
            }
          ],
          "passthrough": {
            "element": "TextInput",
            "url": "/react/TextInput"
          }
        }
      ]
    },
    "button": {
      "id": "button",
      "name": "Button",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [],
      "props": [
        {
          "name": "children",
          "required": true,
          "type": "React.ReactNode",
          "description": "The content of the button."
        },
        {
          "name": "variant",
          "type": "| 'default'\n| 'primary'\n| 'danger'\n| 'outline'\n| 'invisible'",
          "defaultValue": "'default'",
          "description": "Change the visual style of the button."
        },
        {
          "name": "size",
          "type": "| 'small'\n| 'medium'\n| 'large'",
          "defaultValue": "'medium'"
        },
        {
          "name": "leadingIcon",
          "type": "React.ComponentType<OcticonProps>",
          "description": "An icon to display before the button text."
        },
        {
          "name": "trailingIcon",
          "type": "React.ComponentType<OcticonProps>",
          "description": "An icon to display after the button text."
        },
        {
          "name": "as",
          "type": "React.ElementType",
          "defaultValue": "'button'"
        },
        {
          "name": "sx",
          "type": "SystemStyleObject"
        },
        {
          "name": "ref",
          "type": "React.RefObject<HTMLButtonElement>"
        }
      ],
      "passthrough": {
        "element": "button",
        "url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attributes"
      },
      "subcomponents": [
        {
          "name": "Button.Counter",
          "props": [
            {
              "name": "children",
              "required": true,
              "type": "number",
              "description": "The counter value."
            },
            {
              "name": "sx",
              "type": "SystemStyleObject"
            }
          ]
        }
      ]
    },
    "icon_button": {
      "id": "icon_button",
      "name": "IconButton",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [],
      "props": [
        {
          "name": "children",
          "type": "React.ReactNode",
          "defaultValue": "",
          "required": true,
          "description": "This will be the Button description."
        },
        {
          "name": "variant",
          "type": "'default' | 'primary' | 'danger' | 'outline' | 'invisible'",
          "defaultValue": "",
          "description": "Changes the look and feel of the button which is different for each variant"
        },
        {
          "name": "size",
          "type": "'small' | 'medium' | 'large'",
          "defaultValue": "",
          "description": "Changes the size of the icon button component"
        },
        {
          "name": "icon",
          "type": "Component",
          "defaultValue": "",
          "description": "provide an octicon. It will be placed in the center of the button"
        },
        {
          "name": "sx",
          "type": "SystemStyleObject"
        }
      ],
      "subcomponents": []
    },
    "form_control": {
      "id": "form_control",
      "name": "FormControl",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [],
      "props": [
        {
          "name": "children",
          "type": "FormControl.Label | FormControl.Caption | FormControl.Validation | Autocomplete | TextInput | TextInputWithTokens | Select",
          "defaultValue": "",
          "required": true,
          "description": ""
        },
        {
          "name": "disabled",
          "type": "boolean",
          "defaultValue": "false",
          "description": "Whether the control allows user input"
        },
        {
          "name": "id",
          "type": "string",
          "defaultValue": "a generated string",
          "description": "The unique identifier for this control. Used to associate the label, validation text, and caption text"
        },
        {
          "name": "required",
          "type": "boolean",
          "defaultValue": "false",
          "description": "If true, the user must specify a value for the input before the owning form can be submitted"
        },
        {
          "name": "sx",
          "type": "SystemStyleObject"
        },
        {
          "name": "ref",
          "type": "React.RefObject<HTMLDivElement>"
        }
      ],
      "subcomponents": [
        {
          "name": "FormControl.Label",
          "props": [
            {
              "name": "visuallyHidden",
              "type": "boolean",
              "defaultValue": "false",
              "description": "Whether the label should be visually hidden"
            },
            {
              "name": "sx",
              "type": "SystemStyleObject"
            }
          ]
        },
        {
          "name": "FormControl.Caption",
          "props": [
            {
              "name": "children",
              "type": "React.ReactNode",
              "defaultValue": "",
              "description": "The content (usually just text) that is rendered to give contextual info about the field"
            },
            {
              "name": "sx",
              "type": "SystemStyleObject"
            }
          ]
        },
        {
          "name": "FormControl.Validation",
          "props": [
            {
              "name": "children",
              "type": "React.ReactNode",
              "defaultValue": "",
              "description": "The content (usually just text) that is rendered to give contextual info about the validation result for the field"
            },
            {
              "name": "variant",
              "type": "'error' | 'success' | 'warning'",
              "defaultValue": "",
              "required": true,
              "description": "Changes the visual style to match the validation status"
            },
            {
              "name": "sx",
              "type": "SystemStyleObject"
            }
          ]
        },
        {
          "name": "FormControl.LeadingVisual",
          "props": [
            {
              "name": "children",
              "type": "React.ReactNode",
              "defaultValue": "",
              "description": "The visual to render before the choice input's label"
            },
            {
              "name": "sx",
              "type": "SystemStyleObject"
            }
          ]
        }
      ]
    },
    "drafts_hidden": {
      "id": "drafts_hidden",
      "name": "Hidden",
      "status": "draft",
      "a11yReviewed": false,
      "stories": [],
      "props": [
        {
          "name": "on",
          "type": "'narrow' | 'wide' | 'regular' | Array<'narrow' | 'regular' | 'wide'>",
          "defaultValue": "",
          "description": "In which viewport(s) the children are going to be hidden"
        }
      ],
      "subcomponents": []
    },
    "nav_list": {
      "id": "nav_list",
      "name": "NavList",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [],
      "props": [
        {
          "name": "aria-label",
          "type": "string",
          "defaultValue": "",
          "description": ""
        },
        {
          "name": "aria-labelledby",
          "type": "string",
          "defaultValue": "",
          "description": ""
        },
        {
          "name": "ref",
          "type": "React.RefObject<HTMLElement>"
        },
        {
          "name": "as",
          "type": "React.ElementType",
          "defaultValue": "\"nav\""
        },
        {
          "name": "sx",
          "type": "SystemStyleObject"
        }
      ],
      "subcomponents": [
        {
          "name": "NavList.Item",
          "props": [
            {
              "name": "href",
              "type": "string",
              "defaultValue": "",
              "description": "The URL that the item navigates to. `href` is passed to the underlying `<a>` element. If `as` is specified, the component may need different props. If the item contains a sub-nav, the item is rendered as a `<button>` and `href` is ignored."
            },
            {
              "name": "aria-current",
              "type": "| 'page' | 'step' | 'location' | 'date' | 'time' | true | false",
              "defaultValue": "false",
              "description": "Set `aria-current` to `\"page\"` to indicate that the item represents the current page. Set `aria-current` to `\"location\"` to indicate that the item represents the current location on a page. For more information about `aria-current`, see [MDN](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-current)."
            },
            {
              "name": "ref",
              "type": "React.RefObject<HTMLAnchorElement>"
            },
            {
              "name": "as",
              "type": "React.ElementType",
              "defaultValue": "\"a\""
            },
            {
              "name": "sx",
              "type": "SystemStyleObject"
            }
          ],
          "passthrough": {
            "element": "a",
            "url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#Attributes"
          }
        },
        {
          "name": "NavList.LeadingVisual",
          "props": [
            {
              "name": "sx",
              "type": "SystemStyleObject"
            },
            {
              "name": "ref",
              "type": "React.RefObject<HTMLElement>"
            }
          ]
        },
        {
          "name": "NavList.TrailingVisual",
          "props": [
            {
              "name": "sx",
              "type": "SystemStyleObject"
            },
            {
              "name": "ref",
              "type": "React.RefObject<HTMLElement>"
            }
          ]
        },
        {
          "name": "NavList.SubNav",
          "props": [
            {
              "name": "sx",
              "type": "SystemStyleObject"
            },
            {
              "name": "ref",
              "type": "React.RefObject<HTMLElement>"
            }
          ]
        },
        {
          "name": "NavList.Group",
          "props": [
            {
              "name": "sx",
              "type": "SystemStyleObject"
            },
            {
              "name": "ref",
              "type": "React.RefObject<HTMLElement>"
            }
          ]
        },
        {
          "name": "NavList.Divider",
          "props": [
            {
              "name": "sx",
              "type": "SystemStyleObject"
            },
            {
              "name": "ref",
              "type": "React.RefObject<HTMLElement>"
            }
          ]
        }
      ]
    },
    "drafts_page_header": {
      "id": "drafts_page_header",
      "name": "PageHeader",
      "status": "draft",
      "a11yReviewed": false,
      "stories": [],
      "props": [
        {
          "name": "aria-label",
          "type": "string | undefined",
          "defaultValue": "",
          "description": "A unique label for the rendered main landmark"
        },
        {
          "name": "hidden",
          "type": "| boolean | { narrow?: boolean regular?: boolean wide?: boolean }",
          "defaultValue": "false",
          "description": "Whether the content is hidden."
        },
        {
          "name": "sx",
          "type": "SystemStyleObject"
        },
        {
          "name": "as",
          "type": "React.ElementType",
          "defaultValue": "\"header\""
        }
      ],
      "subcomponents": [
        {
          "name": "PageHeader.ContextArea",
          "props": [
            {
              "name": "hidden",
              "type": "| boolean | { narrow?: boolean regular?: boolean wide?: boolean }",
              "defaultValue": "false",
              "description": "Whether the content is hidden."
            },
            {
              "name": "sx",
              "type": "SystemStyleObject"
            }
          ]
        },
        {
          "name": "PageHeader.ContextArea Children",
          "props": [
            {
              "name": "href",
              "type": "string",
              "defaultValue": "",
              "description": "The URL to link to."
            },
            {
              "name": "hidden",
              "type": "| boolean | { narrow?: boolean regular?: boolean wide?: boolean }",
              "defaultValue": "`{ narrow: false regular: true wide: true }`",
              "description": "Whether the parent link is hidden."
            },
            {
              "name": "sx",
              "type": "SystemStyleObject"
            }
          ]
        },
        {
          "name": "PageHeader.ContextArea Children",
          "props": [
            {
              "name": "hidden",
              "type": "| boolean | { narrow?: boolean regular?: boolean wide?: boolean }",
              "defaultValue": "false",
              "description": "Whether the content is hidden."
            },
            {
              "name": "sx",
              "type": "SystemStyleObject"
            }
          ]
        },
        {
          "name": "PageHeader.ContextArea Children",
          "props": [
            {
              "name": "hidden",
              "type": "| boolean | { narrow?: boolean regular?: boolean wide?: boolean }",
              "defaultValue": "false",
              "description": "Whether the content is hidden."
            },
            {
              "name": "sx",
              "type": "SystemStyleObject"
            }
          ]
        },
        {
          "name": "PageHeader.TitleArea",
          "props": [
            {
              "name": "hidden",
              "type": "| boolean | { narrow?: boolean regular?: boolean wide?: boolean }",
              "defaultValue": "false",
              "description": "Whether the content is hidden."
            },
            {
              "name": "variant",
              "type": "| 'subtitle' | 'medium' | 'large' | { narrow?: | 'subtitle' | 'medium' | 'large' regular?: | 'subtitle' | 'medium' | 'large' wide?: | 'subtitle' | 'medium' | 'large' }",
              "defaultValue": "medium",
              "description": "Default title (medium) is the most common page title size. Use for static titles in most situations. \nLarge variant should be used for user-generated content such as issues, pull requests, or discussions. \nSubtitle variant can be used when a PageHeader.Title is already present in the page, such as in a SplitPageLayout."
            },
            {
              "name": "sx",
              "type": "SystemStyleObject"
            }
          ]
        },
        {
          "name": "PageHeader.TitleArea Children",
          "props": [
            {
              "name": "hidden",
              "type": "| boolean | { narrow?: boolean regular?: boolean wide?: boolean }",
              "defaultValue": "false",
              "description": "Whether the content is hidden."
            },
            {
              "name": "sx",
              "type": "SystemStyleObject"
            }
          ]
        },
        {
          "name": "PageHeader.TitleArea Children",
          "props": [
            {
              "name": "hidden",
              "type": "| boolean | { narrow?: boolean regular?: boolean wide?: boolean }",
              "defaultValue": "false",
              "description": "Whether the content is hidden."
            },
            {
              "name": "sx",
              "type": "SystemStyleObject"
            }
          ]
        },
        {
          "name": "PageHeader.TitleArea Children",
          "props": [
            {
              "name": "hidden",
              "type": "| boolean | { narrow?: boolean regular?: boolean wide?: boolean }",
              "defaultValue": "false",
              "description": "Whether the content is hidden."
            },
            {
              "name": "sx",
              "type": "SystemStyleObject"
            },
            {
              "name": "as",
              "type": "React.ElementType",
              "defaultValue": "\"h3\""
            }
          ]
        },
        {
          "name": "PageHeader.TitleArea Children",
          "props": [
            {
              "name": "hidden",
              "type": "| boolean | { narrow?: boolean regular?: boolean wide?: boolean }",
              "defaultValue": "false",
              "description": "Whether the content is hidden."
            },
            {
              "name": "sx",
              "type": "SystemStyleObject"
            }
          ]
        },
        {
          "name": "PageHeader.TitleArea Children",
          "props": [
            {
              "name": "hidden",
              "type": "| boolean | { narrow?: boolean regular?: boolean wide?: boolean }",
              "defaultValue": "false",
              "description": "Whether the content is hidden."
            },
            {
              "name": "sx",
              "type": "SystemStyleObject"
            }
          ]
        },
        {
          "name": "PageHeader.TitleArea Children",
          "props": [
            {
              "name": "hidden",
              "type": "| boolean | { narrow?: boolean regular?: boolean wide?: boolean }",
              "defaultValue": "false",
              "description": "Whether the content is hidden."
            },
            {
              "name": "sx",
              "type": "SystemStyleObject"
            }
          ]
        },
        {
          "name": "PageHeader.Description",
          "props": [
            {
              "name": "hidden",
              "type": "| boolean | { narrow?: boolean regular?: boolean wide?: boolean }",
              "defaultValue": "false",
              "description": "Whether the content is hidden."
            },
            {
              "name": "sx",
              "type": "SystemStyleObject"
            }
          ]
        },
        {
          "name": "PageHeader.Navigation",
          "props": [
            {
              "name": "hidden",
              "type": "| boolean | { narrow?: boolean regular?: boolean wide?: boolean }",
              "defaultValue": "false",
              "description": "Whether the content is hidden."
            },
            {
              "name": "sx",
              "type": "SystemStyleObject"
            }
          ]
        }
      ]
    },
    "page_layout": {
      "id": "page_layout",
      "name": "PageLayout",
      "status": "alpha",
      "a11yReviewed": true,
      "stories": [],
      "props": [
        {
          "name": "containerWidth",
          "type": "| 'full' | 'medium' | 'large' | 'xlarge'",
          "defaultValue": "'xlarge'",
          "description": "The maximum width of the page container."
        },
        {
          "name": "padding",
          "type": "| 'none' | 'condensed' | 'normal'",
          "defaultValue": "'normal'",
          "description": "The spacing between the outer edges of the page container and the viewport"
        },
        {
          "name": "columnGap",
          "type": "| 'none' | 'condensed' | 'normal'",
          "defaultValue": "'normal'",
          "description": ""
        },
        {
          "name": "rowGap",
          "type": "| 'none' | 'condensed' | 'normal'",
          "defaultValue": "'normal'",
          "description": ""
        },
        {
          "name": "sx",
          "type": "SystemStyleObject"
        }
      ],
      "subcomponents": [
        {
          "name": "PageLayout.Header",
          "props": [
            {
              "name": "aria-label",
              "type": "string | undefined",
              "defaultValue": "",
              "description": "A unique label for the rendered banner landmark"
            },
            {
              "name": "aria-labelledby",
              "type": "string | undefined",
              "defaultValue": "",
              "description": "An id to an element which uniquely labels the rendered banner landmark"
            },
            {
              "name": "padding",
              "type": "| 'none' | 'condensed' | 'normal'",
              "defaultValue": "'none'",
              "description": "The amount of padding inside the header."
            },
            {
              "name": "divider",
              "type": "| 'none' | 'line' | { narrow?: | 'none' | 'line' | 'filled' regular?: | 'none' | 'line' wide?: | 'none' | 'line' }",
              "defaultValue": "'none'",
              "description": ""
            },
            {
              "name": "dividerWhenNarrow",
              "type": "| 'inherit' | 'none' | 'line' | 'filled'",
              "defaultValue": "'inherit'",
              "deprecated": true,
              "description": "Use the divider prop with a responsive value instead."
            },
            {
              "name": "hidden",
              "type": "| boolean | { narrow?: boolean regular?: boolean wide?: boolean }",
              "defaultValue": "false",
              "description": "Whether the header is hidden."
            },
            {
              "name": "sx",
              "type": "SystemStyleObject"
            }
          ]
        },
        {
          "name": "PageLayout.Content",
          "props": [
            {
              "name": "aria-label",
              "type": "string | undefined",
              "defaultValue": "",
              "description": "A unique label for the rendered main landmark"
            },
            {
              "name": "aria-labelledby",
              "type": "string | undefined",
              "defaultValue": "",
              "description": "An id to an element which uniquely labels the rendered main landmark"
            },
            {
              "name": "width",
              "type": "| 'full' | 'medium' | 'large' | 'xlarge'",
              "defaultValue": "'full'",
              "description": "The maximum width of the content region."
            },
            {
              "name": "padding",
              "type": "| 'none' | 'condensed' | 'normal'",
              "defaultValue": "'none'",
              "description": "The amount of padding inside the content."
            },
            {
              "name": "hidden",
              "type": "| boolean | { narrow?: boolean regular?: boolean wide?: boolean }",
              "defaultValue": "false",
              "description": "Whether the content is hidden."
            },
            {
              "name": "sx",
              "type": "SystemStyleObject"
            }
          ]
        },
        {
          "name": "PageLayout.Pane",
          "props": [
            {
              "name": "position",
              "type": "| 'start' | 'end' | { narrow?: | 'start' | 'end' regular?: | 'start' | 'end' wide?: | 'start' | 'end' }",
              "defaultValue": "'end'",
              "description": ""
            },
            {
              "name": "positionWhenNarrow",
              "type": "| 'inherit' | 'start' | 'end'",
              "defaultValue": "'inherit'",
              "deprecated": true,
              "description": "Use the position prop with a responsive value instead."
            },
            {
              "name": "width",
              "type": "| 'small' | 'medium' | 'large'",
              "defaultValue": "'medium'",
              "description": "The width of the pane."
            },
            {
              "name": "resizable",
              "type": "boolean",
              "defaultValue": "false",
              "description": "When true, the pane may be resized by the user."
            },
            {
              "name": "widthStorageKey",
              "type": "string",
              "defaultValue": "'paneWidth'",
              "description": "Provide a key used by localStorage to persist the size of the pane on the client."
            },
            {
              "name": "sticky",
              "type": "boolean",
              "defaultValue": "false",
              "description": "Whether the pane should stick to the top of the screen while the content scrolls."
            },
            {
              "name": "offsetHeader",
              "type": "number | string",
              "defaultValue": "0",
              "description": "Use offsetHeader along with the sticky prop to push the sticky pane down to make room for a sticky header if necessary. Use the type `string` to specify the height with a unit i.e. 5rem; otherwise the type `number` will be taken as px."
            },
            {
              "name": "padding",
              "type": "| 'none' | 'condensed' | 'normal'",
              "defaultValue": "'none'",
              "description": "The amount of padding inside the pane."
            },
            {
              "name": "divider",
              "type": "| 'none' | 'line' | { narrow?: | 'none' | 'line' | 'filled' regular?: | 'none' | 'line' wide?: | 'none' | 'line' }",
              "defaultValue": "'none'",
              "description": ""
            },
            {
              "name": "dividerWhenNarrow",
              "type": "| 'inherit' | 'none' | 'line' | 'filled'",
              "defaultValue": "'inherit'",
              "deprecated": true,
              "description": "Use the divider prop with a responsive value instead."
            },
            {
              "name": "hidden",
              "type": "| boolean | { narrow?: boolean regular?: boolean wide?: boolean }",
              "defaultValue": "false",
              "description": "Whether the pane is hidden."
            },
            {
              "name": "sx",
              "type": "SystemStyleObject"
            },
            {
              "name": "ref",
              "type": "React.RefObject<HTMLDivElement>"
            }
          ]
        },
        {
          "name": "PageLayout.Footer",
          "props": [
            {
              "name": "aria-label",
              "type": "string | undefined",
              "defaultValue": "",
              "description": "A unique label for the rendered contentinfo landmark"
            },
            {
              "name": "aria-labelledby",
              "type": "string | undefined",
              "defaultValue": "",
              "description": "An id to an element which uniquely labels the rendered contentinfo landmark"
            },
            {
              "name": "padding",
              "type": "| 'none' | 'condensed' | 'normal'",
              "defaultValue": "'none'",
              "description": "The amount of padding inside the footer."
            },
            {
              "name": "divider",
              "type": "| 'none' | 'line' | { narrow?: | 'none' | 'line' | 'filled' regular?: | 'none' | 'line' wide?: | 'none' | 'line' }",
              "defaultValue": "'none'",
              "description": ""
            },
            {
              "name": "dividerWhenNarrow",
              "type": "| 'inherit' | 'none' | 'line' | 'filled'",
              "defaultValue": "'inherit'",
              "deprecated": true,
              "description": "Use the divider prop with a responsive value instead."
            },
            {
              "name": "hidden",
              "type": "| boolean | { narrow?: boolean regular?: boolean wide?: boolean }",
              "defaultValue": "false",
              "description": "Whether the footer is hidden."
            },
            {
              "name": "sx",
              "type": "SystemStyleObject"
            }
          ]
        }
      ]
    },
    "pagination": {
      "id": "pagination",
      "name": "Pagination",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [],
      "props": [
        {
          "name": "currentPage",
          "type": "number",
          "defaultValue": "",
          "required": true,
          "description": "The currently selected page."
        },
        {
          "name": "pageCount",
          "type": "number",
          "defaultValue": "",
          "required": true,
          "description": "The total number of pages."
        },
        {
          "name": "hrefBuilder",
          "type": "function",
          "defaultValue": "",
          "description": "A function to generate links based on page number."
        },
        {
          "name": "marginPageCount",
          "type": "number",
          "defaultValue": "1",
          "description": "How many pages to always show at the left and right of the component."
        },
        {
          "name": "onPageChange",
          "type": "function",
          "defaultValue": "no-op",
          "description": "Called with event and page number when a page is clicked."
        },
        {
          "name": "showPages",
          "type": "boolean",
          "defaultValue": "true",
          "description": "Whether or not to show the individual page links."
        },
        {
          "name": "surroundingPageCount",
          "type": "number",
          "defaultValue": "2",
          "description": "How many pages to display on each side of the currently selected page."
        },
        {
          "name": "sx",
          "type": "SystemStyleObject"
        }
      ],
      "subcomponents": []
    },
    "portal": {
      "id": "portal",
      "name": "Portal",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [],
      "props": [
        {
          "name": "onMount",
          "type": "function",
          "defaultValue": "",
          "description": "Called when this portal is added to the DOM"
        },
        {
          "name": "containerName",
          "type": "string",
          "defaultValue": "",
          "description": "Renders the portal children into the container registered with the given name. If omitted, children are rendered into the default portal root."
        }
      ],
      "subcomponents": []
    },
    "relative_time": {
      "id": "relative_time",
      "name": "RelativeTime",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [],
      "props": [
        {
          "name": "datetime",
          "type": "string",
          "defaultValue": "",
          "required": true,
          "description": "An ISO8601 time represeting the time"
        },
        {
          "name": "date",
          "type": "string",
          "defaultValue": "",
          "description": "Instead of passing the `datetime`, it is possible to pass a full `Date` object into the `date` prop"
        },
        {
          "name": "format",
          "type": "'auto' | 'micro' | 'elapsed'",
          "defaultValue": "'auto'",
          "description": "The format with which to display the time"
        },
        {
          "name": "tense",
          "type": "'auto' | 'past' | 'future'",
          "defaultValue": "'auto'",
          "description": "The tense to use when displaying a relative time"
        },
        {
          "name": "precision",
          "type": "'year' | 'month' | 'day' | 'hour' | 'minute' | 'second'",
          "defaultValue": "'second'",
          "description": "The precision to use when displaying an elapsed time"
        },
        {
          "name": "threshold",
          "type": "string",
          "defaultValue": "'P30D'",
          "description": "The threshold (ISO8601 duration) to display relative dates within"
        },
        {
          "name": "prefix",
          "type": "string",
          "defaultValue": "'on'",
          "description": "The prefix to use when displaying a localised (non relative) date"
        },
        {
          "name": "second",
          "type": "'numeric' | '2-digit'",
          "defaultValue": "",
          "description": "The format with which to render seconds"
        },
        {
          "name": "minute",
          "type": "'numeric' | '2-digit'",
          "defaultValue": "",
          "description": "The format with which to render minutes"
        },
        {
          "name": "hour",
          "type": "'numeric' | '2-digit'",
          "defaultValue": "",
          "description": "The format with which to render hours"
        },
        {
          "name": "weekday",
          "type": "'short' | 'long' | 'narrow'",
          "defaultValue": "",
          "description": "The format with which to render weekdays"
        },
        {
          "name": "day",
          "type": "'numeric' | '2-digit'",
          "defaultValue": "",
          "description": "The format with which to render days"
        },
        {
          "name": "month",
          "type": "'numeric' | '2-digit' | 'short' | 'long' | 'narrow'",
          "defaultValue": "'numeric'",
          "description": "The format with which to render months"
        },
        {
          "name": "year",
          "type": "'numeric' | '2-digit'",
          "defaultValue": "",
          "description": "The format with which to render years"
        },
        {
          "name": "timeZoneName",
          "type": "'long' | 'short' | 'shortOffset' | 'longOffset' | 'shortGeneric' | 'longGeneric'",
          "defaultValue": "",
          "description": "The format with which to render the time zone"
        },
        {
          "name": "ref",
          "type": "React.RefObject<RelativeTimeElement>"
        },
        {
          "name": "as",
          "type": "React.ElementType",
          "defaultValue": "\"relative-time\""
        },
        {
          "name": "sx",
          "type": "SystemStyleObject"
        }
      ],
      "subcomponents": []
    },
    "segmented_control": {
      "id": "segmented_control",
      "name": "SegmentedControl",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [],
      "props": [
        {
          "name": "aria-label",
          "type": "string",
          "defaultValue": "",
          "description": ""
        },
        {
          "name": "aria-labelledby",
          "type": "string",
          "defaultValue": "",
          "description": ""
        },
        {
          "name": "aria-describedby",
          "type": "string",
          "defaultValue": "",
          "description": ""
        },
        {
          "name": "fullWidth",
          "type": "| boolean | { narrow?: boolean regular?: boolean wide?: boolean }",
          "defaultValue": "",
          "description": "Whether the control fills the width of its parent"
        },
        {
          "name": "onChange",
          "type": "(selectedIndex?: number) => void",
          "defaultValue": "",
          "description": "The handler that gets called when a segment is selected"
        },
        {
          "name": "variant",
          "type": "| 'default' | { narrow?: 'hideLabels' | 'dropdown' | 'default' regular?: 'hideLabels' | 'dropdown' | 'default' wide?: 'hideLabels' | 'dropdown' | 'default' }",
          "defaultValue": "'default'",
          "description": "Configure alternative ways to render the control when it gets rendered in tight spaces"
        },
        {
          "name": "sx",
          "type": "SystemStyleObject"
        },
        {
          "name": "ref",
          "type": "React.RefObject<HTMLDivElement>"
        }
      ],
      "subcomponents": [
        {
          "name": "SegmentedControl.Button",
          "props": [
            {
              "name": "leadingIcon",
              "type": "Component",
              "defaultValue": "",
              "description": "The leading icon comes before item label"
            },
            {
              "name": "selected",
              "type": "boolean",
              "defaultValue": "",
              "description": "Whether the segment is selected. This is used for controlled SegmentedControls, and needs to be updated using the onChange handler on SegmentedControl."
            },
            {
              "name": "defaultSelected",
              "type": "boolean",
              "defaultValue": "",
              "description": "Whether the segment is selected. This is used for uncontrolled SegmentedControls to pick one SegmentedControlButton that is selected on the initial render."
            },
            {
              "name": "sx",
              "type": "SystemStyleObject"
            },
            {
              "name": "ref",
              "type": "React.RefObject<HTMLButtonElement>"
            }
          ]
        },
        {
          "name": "SegmentedControl.IconButton",
          "props": [
            {
              "name": "aria-label",
              "type": "string",
              "defaultValue": "",
              "required": true,
              "description": ""
            },
            {
              "name": "icon",
              "type": "Component",
              "defaultValue": "",
              "required": true,
              "description": "The icon that represents the segmented control item"
            },
            {
              "name": "selected",
              "type": "boolean",
              "defaultValue": "",
              "description": "Whether the segment is selected. This is used for controlled SegmentedControls, and needs to be updated using the onChange handler on SegmentedControl."
            },
            {
              "name": "selected",
              "type": "'small' | 'medium'",
              "defaultValue": "",
              "description": "The size of the buttons"
            },
            {
              "name": "defaultSelected",
              "type": "boolean",
              "defaultValue": "",
              "description": "Whether the segment is selected. This is used for uncontrolled SegmentedControls to pick one SegmentedControlButton that is selected on the initial render."
            },
            {
              "name": "sx",
              "type": "SystemStyleObject"
            },
            {
              "name": "ref",
              "type": "React.RefObject<HTMLButtonElement>"
            }
          ]
        }
      ]
    },
    "select_panel": {
      "id": "select_panel",
      "name": "SelectPanel",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [],
      "props": [
        {
          "name": "onOpenChange",
          "type": "( open: boolean, gesture: | 'anchor-click' | 'anchor-key-press' | 'click-outside' | 'escape' | 'selection' ) => void",
          "defaultValue": "",
          "required": true,
          "description": ""
        },
        {
          "name": "placeholder",
          "type": "string",
          "defaultValue": "",
          "description": ""
        },
        {
          "name": "overlayProps",
          "type": "Partial<OverlayProps>",
          "defaultValue": "",
          "description": "See [Overlay props](/react/Overlay#props)."
        },
        {
          "name": "title",
          "type": "string",
          "defaultValue": "",
          "description": ""
        },
        {
          "name": "inputLabel",
          "type": "string",
          "defaultValue": "",
          "description": ""
        },
        {
          "name": "inputPlaceholder",
          "type": "string",
          "defaultValue": "",
          "description": ""
        },
        {
          "name": "selected",
          "type": "ItemInput | ItemInput[] | undefined",
          "defaultValue": "",
          "description": "Specify the selected item(s)"
        },
        {
          "name": "onSelectedChange",
          "type": "(selected: ItemInput | ItemInput[]) => void",
          "defaultValue": "",
          "description": "Provide a callback called when the selected item(s) change"
        }
      ],
      "subcomponents": []
    },
    "split_page_layout": {
      "id": "split_page_layout",
      "name": "SplitPageLayout",
      "status": "alpha",
      "a11yReviewed": true,
      "stories": [],
      "props": [
        {
          "name": "sx",
          "type": "SystemStyleObject"
        }
      ],
      "subcomponents": [
        {
          "name": "SplitPageLayout.Header",
          "props": [
            {
              "name": "padding",
              "type": "| 'none' | 'condensed' | 'normal'",
              "defaultValue": "'normal'",
              "description": "The amount of padding inside the header."
            },
            {
              "name": "divider",
              "type": "| 'none' | 'line' | { narrow?: | 'none' | 'line' | 'filled' regular?: | 'none' | 'line' wide?: | 'none' | 'line' }",
              "defaultValue": "'line'",
              "description": ""
            },
            {
              "name": "hidden",
              "type": "| boolean | { narrow?: boolean regular?: boolean wide?: boolean }",
              "defaultValue": "false",
              "description": "Whether the header is hidden."
            },
            {
              "name": "sx",
              "type": "SystemStyleObject"
            }
          ]
        },
        {
          "name": "SplitPageLayout.Content",
          "props": [
            {
              "name": "width",
              "type": "| 'full' | 'medium' | 'large' | 'xlarge'",
              "defaultValue": "'large'",
              "description": "The maximum width of the content region."
            },
            {
              "name": "padding",
              "type": "| 'none' | 'condensed' | 'normal'",
              "defaultValue": "'normal'",
              "description": "The amount of padding inside the content."
            },
            {
              "name": "hidden",
              "type": "| boolean | { narrow?: boolean regular?: boolean wide?: boolean }",
              "defaultValue": "false",
              "description": "Whether the content is hidden."
            },
            {
              "name": "sx",
              "type": "SystemStyleObject"
            }
          ]
        },
        {
          "name": "SplitPageLayout.Pane",
          "props": [
            {
              "name": "position",
              "type": "| 'start' | 'end' | { narrow?: | 'start' | 'end' regular?: | 'start' | 'end' wide?: | 'start' | 'end' }",
              "defaultValue": "'start'",
              "description": ""
            },
            {
              "name": "width",
              "type": "| 'small' | 'medium' | 'large'",
              "defaultValue": "'medium'",
              "description": "The width of the pane."
            },
            {
              "name": "resizable",
              "type": "boolean",
              "defaultValue": "false",
              "description": "When true, the pane may be resized by the user."
            },
            {
              "name": "widthStorageKey",
              "type": "string",
              "defaultValue": "'paneWidth'",
              "description": "Provide a key used by localStorage to persist the size of the pane on the client."
            },
            {
              "name": "sticky",
              "type": "boolean",
              "defaultValue": "true",
              "description": "Whether the pane should stick to the top of the screen while the content scrolls."
            },
            {
              "name": "offsetHeader",
              "type": "number | string",
              "defaultValue": "0",
              "description": "Use offsetHeader along with the sticky prop to push the sticky pane down to make room for a sticky header if necessary. Use the type `string` to specify the height with a unit i.e. 5rem; otherwise the type `number` will be taken as px."
            },
            {
              "name": "padding",
              "type": "| 'none' | 'condensed' | 'normal'",
              "defaultValue": "'normal'",
              "description": "The amount of padding inside the pane."
            },
            {
              "name": "divider",
              "type": "| 'none' | 'line' | { narrow?: | 'none' | 'line' | 'filled' regular?: | 'none' | 'line' wide?: | 'none' | 'line' }",
              "defaultValue": "'line'",
              "description": ""
            },
            {
              "name": "hidden",
              "type": "| boolean | { narrow?: boolean regular?: boolean wide?: boolean }",
              "defaultValue": "false",
              "description": "Whether the pane is hidden."
            },
            {
              "name": "sx",
              "type": "SystemStyleObject"
            }
          ]
        },
        {
          "name": "SplitPageLayout.Footer",
          "props": [
            {
              "name": "padding",
              "type": "| 'none' | 'condensed' | 'normal'",
              "defaultValue": "'normal'",
              "description": "The amount of padding inside the footer."
            },
            {
              "name": "divider",
              "type": "| 'none' | 'line' | { narrow?: | 'none' | 'line' | 'filled' regular?: | 'none' | 'line' wide?: | 'none' | 'line' }",
              "defaultValue": "'line'",
              "description": ""
            },
            {
              "name": "hidden",
              "type": "| boolean | { narrow?: boolean regular?: boolean wide?: boolean }",
              "defaultValue": "false",
              "description": "Whether the footer is hidden."
            },
            {
              "name": "sx",
              "type": "SystemStyleObject"
            }
          ]
        }
      ]
    },
    "token": {
      "id": "token",
      "name": "Token",
      "status": "alpha",
      "a11yReviewed": false,
      "stories": [],
      "props": [],
      "subcomponents": []
    },
    "tree_view": {
      "id": "tree_view",
      "name": "TreeView",
      "status": "draft",
      "a11yReviewed": false,
      "stories": [
        "components-treeview-features--files",
        "components-treeview-features--files-changed"
      ],
      "props": [
        {
          "name": "children",
          "type": "React.ReactNode",
          "required": true
        }
      ],
      "subcomponents": [
        {
          "name": "TreeView.Item",
          "props": [
            {
              "name": "children",
              "type": "React.ReactNode",
              "required": true
            },
            {
              "name": "id",
              "type": "string",
              "required": true,
              "description": "A unique identifier for the item."
            },
            {
              "name": "current",
              "type": "boolean",
              "defaultValue": "false",
              "description": "Indicates whether the item is the current item. No more than one item should be current at once. The path to the current item will be expanded by default."
            },
            {
              "name": "defaultExpanded",
              "type": "boolean",
              "description": "The expanded state of the item when it is initially rendered. Use when you do not need to control the state."
            },
            {
              "name": "expanded",
              "type": "boolean",
              "description": "The controlled expanded state of item. Must be used in conjunction with onExpandedChange."
            },
            {
              "name": "containIntrinsicSize",
              "type": "string",
              "description": "The size of this item's contents. Passing this will set 'content-visiblity: auto' on the content container, delaying rendering until the item is in the viewport."
            },
            {
              "name": "onExpandedChange",
              "type": "(expanded: boolean) => void",
              "description": "Event handler called when the expanded state of the item changes."
            },
            {
              "name": "onSelect",
              "type": "(event: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>) => void"
            },
            {
              "name": "ref",
              "type": "React.Ref<HTMLElement>"
            }
          ]
        },
        {
          "name": "TreeView.LeadingVisual",
          "props": [
            {
              "name": "children",
              "required": true,
              "type": "| React.ReactNode\n| (props: {isExpanded: boolean}) => React.ReactNode)"
            },
            {
              "name": "label",
              "type": "string",
              "description": "Provide an accessible label for the visual. This is not necessary for decorative visuals."
            }
          ]
        },
        {
          "name": "TreeView.TrailingVisual",
          "props": [
            {
              "name": "children",
              "required": true,
              "type": "| React.ReactNode\n| (props: {isExpanded: boolean}) => React.ReactNode)"
            },
            {
              "name": "label",
              "type": "string",
              "description": "Provide an accessible label for the visual. This is not necessary for decorative visuals."
            }
          ]
        },
        {
          "name": "TreeView.DirectoryIcon",
          "props": []
        },
        {
          "name": "TreeView.SubTree",
          "props": [
            {
              "name": "children",
              "type": "React.ReactNode"
            },
            {
              "name": "state",
              "type": "| 'initial'\n| 'loading'\n| 'done'\n| 'error'",
              "description": "Specify a state if items in the subtree are loaded asynchronously. An asynchronous subtree can be in one of the following states: 'initial', 'loading', 'done', or 'error'. In the 'initial' state, items are neither loaded nor loading. In the 'loading' state, items are loading and the subtree will render a loading indicator. In the 'done' state, items are loaded. Screen readers will announce when a subtree enters the 'done' state. An 'error' state means that an error occured while loading items."
            },
            {
              "name": "count",
              "type": "number",
              "description": "The number of items expected to be in the subtree. When in the loading state, the subtree will render a skeleton loading placeholder with the specified count of items"
            }
          ]
        },
        {
          "name": "TreeView.ErrorDialog",
          "props": [
            {
              "name": "children",
              "required": true,
              "type": "React.ReactNode",
              "description": "The content of the dialog. This is usually a message explaining the error."
            },
            {
              "name": "title",
              "type": "string",
              "defaultValue": "'Error'",
              "description": "The title of the dialog. This is usually a short description of the error."
            },
            {
              "name": "onRetry",
              "type": "() => void",
              "description": "Event handler called when the user clicks the retry button."
            },
            {
              "name": "onDismiss",
              "type": "() => void",
              "description": "Event handler called when the dialog is dismissed."
            }
          ]
        }
      ]
    },
    "drafts_underline_nav2": {
      "id": "drafts_underline_nav2",
      "name": "UnderlineNav2",
      "status": "draft",
      "a11yReviewed": true,
      "stories": [],
      "props": [],
      "subcomponents": [
        {
          "name": "UnderlineNav",
          "props": [
            {
              "name": "afterSelect",
              "type": "(event) => void",
              "defaultValue": "",
              "description": "The handler that gets called when a nav link child is selected"
            },
            {
              "name": "aria-label",
              "type": "string",
              "defaultValue": "",
              "description": "A unique name for the rendered 'nav' landmark. It will also be used to label the arrow\nbuttons that control the scroll behaviour on coarse pointer devices. (I.e.\n'Scroll ${aria-label} left/right')\n"
            },
            {
              "name": "children",
              "type": "UnderlineNav.Item[]",
              "defaultValue": "",
              "required": true,
              "description": ""
            },
            {
              "name": "loadingCounters",
              "type": "boolean",
              "defaultValue": "false",
              "description": "Whether the navigation items are in loading state. Component waits for all the counters to finish loading to prevent multiple layout shifts."
            },
            {
              "name": "sx",
              "type": "SystemStyleObject"
            }
          ]
        },
        {
          "name": "UnderlineNav.Item",
          "props": [
            {
              "name": "aria-current",
              "type": "| 'page' | 'step' | 'location' | 'date' | 'time' | true | false",
              "defaultValue": "false",
              "description": "Set `aria-current` to `\"page\"` to indicate that the item represents the current page. Set `aria-current` to `\"location\"` to indicate that the item represents the current location on a page. For more information about `aria-current`, see [MDN](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-current)."
            },
            {
              "name": "counter",
              "type": "number",
              "defaultValue": "",
              "description": "The number to display in the counter label."
            },
            {
              "name": "href",
              "type": "string",
              "defaultValue": "",
              "description": "The URL that the item navigates to. 'href' is passed to the underlying '<a>' element. If 'as' is specified, the component may need different props and 'href' is ignored. (Required prop for the react router is 'to' for example)"
            },
            {
              "name": "icon",
              "type": "Component",
              "defaultValue": "",
              "description": "The leading icon comes before item label"
            },
            {
              "name": "onSelect",
              "type": "(event) => void",
              "defaultValue": "",
              "description": "The handler that gets called when a nav link is selected. For example, a manual route binding can be done here(I.e. 'navigate(href)' for the react router.)"
            },
            {
              "name": "as",
              "type": "React.ElementType",
              "defaultValue": "\"a\""
            },
            {
              "name": "as",
              "type": "React.ElementType",
              "defaultValue": "\"a\""
            },
            {
              "name": "sx",
              "type": "SystemStyleObject"
            }
          ],
          "passthrough": {
            "element": "a",
            "url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#Attributes"
          }
        }
      ]
    },
    "drafts_inline_autocomplete": {
      "id": "drafts_inline_autocomplete",
      "name": "InlineAutocomplete",
      "status": "draft",
      "a11yReviewed": false,
      "stories": [],
      "props": [
        {
          "name": "children",
          "type": "React.ReactNode",
          "defaultValue": "",
          "required": true,
          "description": "An `input` or `textarea` compatible component to extend. A compatible component is any component that forwards a ref and props to an underlying `input` or `textarea` element, including but not limited to `Input`, `TextArea`, `input`, `textarea`, `styled.input`, and `styled.textarea`. If the child is not compatible, a runtime `TypeError` will be thrown."
        },
        {
          "name": "triggers",
          "type": "Array<Trigger>",
          "defaultValue": "",
          "required": true,
          "description": "Register the triggers that can cause suggestions to appear."
        },
        {
          "name": "onShowSuggestions",
          "type": "(event: ShowSuggestionsEvent) => void",
          "defaultValue": "",
          "required": true,
          "description": "Called when a valid suggestion query is updated. This should be handled by setting the `suggestions` prop accordingly."
        },
        {
          "name": "onShowSuggestions",
          "type": "() => void",
          "defaultValue": "",
          "required": true,
          "description": "Called when suggestions should be hidden. Set `suggestions` to `null` or an empty array in this case."
        },
        {
          "name": "suggestions",
          "type": "Suggestion[] | null | 'loading'",
          "defaultValue": "",
          "required": true,
          "description": "The currently visible list of suggestions. If `loading`, a loading indicator will be shown. If `null` or empty, the list will be hidden. Suggestion sort will be preserved. Typically, this should not contain more than five or so suggestions."
        },
        {
          "name": "tabInsertsSuggestions",
          "type": "boolean",
          "defaultValue": "false",
          "description": "If `true`, suggestions will be applied with both `Tab` and `Enter`, instead of just `Enter`. This may be expected behavior for users used to IDEs, but use caution when hijacking browser tabbing capability."
        },
        {
          "name": "sx",
          "type": "SystemStyleObject"
        }
      ],
      "subcomponents": []
    },
    "drafts_markdown_editor": {
      "id": "drafts_markdown_editor",
      "name": "MarkdownEditor",
      "status": "draft",
      "a11yReviewed": false,
      "stories": [],
      "props": [],
      "subcomponents": []
    },
    "drafts_markdown_viewer": {
      "id": "drafts_markdown_viewer",
      "name": "MarkdownViewer",
      "status": "draft",
      "a11yReviewed": false,
      "stories": [],
      "props": [],
      "subcomponents": []
    }
  }
}