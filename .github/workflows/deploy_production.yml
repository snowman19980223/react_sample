name: Deploy
on:
  push:
    branches:
      - 'main'
jobs:
  guard:
    name: Guard
    runs-on: ubuntu-latest
    outputs:
      # To avoid deploying documentation for unrelease changes, we check the number of changeset files.
      # If it's 0, we deploy.
      should_deploy: ${{ steps.changeset-count.outputs.change_count == 0 }}
    steps:
      - uses: actions/checkout@v2

      - id: changeset-count
        run: echo "::set-output name=change_count::$(ls .changeset/*.md | grep -v README | wc -l | xargs)"

  deploy:
    name: Production
    needs: [guard]
    if: ${{ needs.guard.outputs.should_deploy == true }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Create GitHub deployment
        uses: chrnorm/deployment-action@v1.2.0
        id: deployment
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          environment: Production

      - name: Deploy with Vercel
        if: ${{ steps.changeset-count.outputs.CHANGE_COUNT == 0 }}
        uses: amondnet/vercel-action@v20
        id: vercel-action
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          vercel-token: ${{ secrets.VERCEL_TOKEN_SHARED }}
          vercel-args: '--prod'
          github-comment: false
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID_SHARED }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Update deployment status (success)
        if: success()
        uses: chrnorm/deployment-status@v1.0.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          environment_url: ${{ steps.vercel-action.outputs.preview-url }}
          state: 'success'
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}

      - name: Update deployment status (failure)
        if: failure()
        uses: chrnorm/deployment-status@v1.0.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          state: 'failure'
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
