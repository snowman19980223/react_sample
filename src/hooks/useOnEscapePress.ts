import {useEffect, useCallback} from 'react'

const handlers: ((e: KeyboardEvent) => void)[] = []

/**
 * Sets up a `keydown` listener on `window.document`. If
 * 1) The pressed key is "Escape", and
 * 2) The event has not had `.preventDefault()` called
 * The given callback will be executed.
 *
 * Note: If multiple `useOnEscapePress` hooks are active simultaneously, the
 * callbacks will occur in reverse order. In other words, if a parent component
 * and a child component both call `useOnEscapePress`, when the user presses
 * Escape, the child component's callback will execute, followed by the parent's
 * callback. Each callback has the chance to call `.preventDefault()` on the
 * event to prevent further callbacks.
 *
 * @param callback {(e: KeyboardEvent) => void} The callback that gets executed
 * when the Escape key is pressed. The KeyboardEvent generated by the Escape
 * keypress is passed as the only argument.
 *
 * @param callbackDependencies {React.DependencyList} The dependencies of the given
 * `onEscape` callback for memoization. See `React.useCallback` for more info.
 */
export const useOnEscapePress = (
  onEscape: (e: KeyboardEvent) => void,
  callbackDependencies?: React.DependencyList
): void => {
  const handleEscape = useCallback((e: KeyboardEvent) => {
    console.log('called')
    if (e.key === 'Escape' && !e.defaultPrevented) {
      for (let i = handlers.length - 1; i >= 0; --i) {
        handlers[i](e)
        if (e.defaultPrevented) {
          break
        }
      }
    }
  }, [])
  const escapeCallback = useCallback(onEscape, callbackDependencies ?? [onEscape])
  useEffect(() => {
    if (handlers.length === 0) {
      document.addEventListener('keydown', handleEscape)
      console.log('added')
    }
    handlers.push(escapeCallback)
    return () => {
      handlers.splice(
        handlers.findIndex(h => h === escapeCallback),
        1
      )
      if (handlers.length === 0) {
        document.removeEventListener('keydown', handleEscape)
        console.log('removed')
      }
    }
  }, [escapeCallback])
}
